{"version":3,"sources":["api/index.ts","store/actions/countSaga.ts","store/actions/mainSaga.ts","store/reducers/countReducer.ts","store/reducers/loadingReducer.ts","store/reducers/initiatedReducer.ts","store/reducers/logReducer.ts","store/reducers/mainReducer.ts","store/index.tsx","components/CompleteButton.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["getRadnomFromApi","min","max","a","fetch","response","json","getInitialCountSaga","incrementAsyncSaga","number","put","type","payload","select","currentState","newCount","count","mainSaga","takeLatest","countReducer","state","action","console","log","loadingReducer","loading","initiatedReducer","initiated","logReducer","date","Date","JSON","stringify","initialState","mainReducer","store","React","createContext","dispatch","actions","StateProvider","children","Provider","useReducer","reducerDispatch","useReactSaga","saga","value","useGlobalStore","useContext","CompleteButton","onClick","disabled","App","useEffect","className","size","percent","icon","MinusOutlined","PlusOutlined","mode","reverse","map","Item","formatDate","CaretRightOutlined","formatLog","formatNumber","getMinutes","getSeconds","replace","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d1a68c1.chunk.js","sourcesContent":["export const getRadnomFromApi = async (min: number, max: number) => {\n    const response = await fetch(`https://www.random.org/integers/?num=1&min=${min}&max=${max}&col=1&base=10&format=plain&rnd=new`);\n    return response.json();\n}","import { select, put } from \"redux-saga/effects\";\nimport { getRadnomFromApi } from \"../../api\";\nimport { Actions, GlobalState, SimpleAction } from \"../reducers/mainReducer\";\n\nexport type GetInitialCountAction = SimpleAction<\"APP_START\">;\n\nexport function* getInitialCountSaga() {\n    const number: number = yield getRadnomFromApi(0, 100);\n    yield put<Actions>({ type: \"COUNT_SET\", payload: number });\n    yield put<Actions>({ type: \"INITIATED\" });\n}\n\nexport type IncrementAsyncAction = SimpleAction<\"INCREMENT_ASYNC\">;\n\nexport function* incrementAsyncSaga() {\n    yield put<Actions>({ type: \"LOADING_START\" });\n    let currentState: GlobalState;\n    let newCount: number;\n    \n    currentState = yield select();\n    newCount = currentState.count;\n    \n    while (newCount < 100) {\n        const currentState: GlobalState = yield select();\n        const number = yield getRadnomFromApi(0, 100 - currentState.count);\n        newCount = currentState.count + number \n        yield put<Actions>({ type: \"COUNT_SET\", payload: newCount });\n    }\n  \n    yield put<Actions>({ type: \"LOADING_FINISH\" });\n}\n\n","import { takeLatest } from \"redux-saga/effects\";\nimport { incrementAsyncSaga, getInitialCountSaga, IncrementAsyncAction, GetInitialCountAction } from \"./countSaga\"\n\nexport type Actions = IncrementAsyncAction | GetInitialCountAction;\n\nexport function* mainSaga() {\n    yield takeLatest(\"APP_START\", getInitialCountSaga);\n    yield takeLatest(\"INCREMENT_ASYNC\", incrementAsyncSaga);\n}","import { Actions, SimpleAction, PayloadedAction, GlobalState } from \"./mainReducer\";\n\ntype CountIncrementAction = SimpleAction<\"COUNT_INCREMENT\">;\ntype CountDecreaseAction = SimpleAction<\"COUNT_DECREASE\">;\ntype CountResetAction = SimpleAction<\"COUNT_RESET\">;\ntype CountSetAction = PayloadedAction<\"COUNT_SET\", number>;\n\nexport type CountActions = CountIncrementAction | CountDecreaseAction | CountSetAction | CountResetAction;\n\nconst minValue = 0;\nconst maxValue = 100;\n\nexport const countReducer = (state: GlobalState, action: Actions): GlobalState[\"count\"] => {\n    console.log(action);\n    \n    const count = state.count;\n    switch (action.type) {\n        case \"COUNT_INCREMENT\":\n            return count < maxValue ? count + 1 : maxValue;\n\n        case \"COUNT_DECREASE\":\n            return count > minValue ? count - 1 : minValue;\n\n        case \"COUNT_RESET\":\n            return minValue;\n        \n        case \"COUNT_SET\":\n            return action.payload;\n\n        default:\n            return count;\n    }\n}\n","import { Actions, SimpleAction, GlobalState } from \"./mainReducer\";\n\ntype LoadingStartAction = SimpleAction<\"LOADING_START\">;\ntype LoadingFinishAction = SimpleAction<\"LOADING_FINISH\">;\n\nexport type LoadingActions = LoadingStartAction | LoadingFinishAction;\n\nexport const loadingReducer = (state: GlobalState, action: Actions): GlobalState[\"loading\"] => {\n    const loading = state.loading;\n    switch (action.type) {\n        case \"LOADING_START\":\n            return true;\n\n        case \"LOADING_FINISH\":\n            return false;\n\n        default:\n            return loading;\n    }\n}","import { Actions, SimpleAction, GlobalState } from \"./mainReducer\";\n\ntype InitiateAction = SimpleAction<\"INITIATED\">;\n\nexport type InitiatedActions = InitiateAction;\n\nexport const initiatedReducer = (state: GlobalState, action: Actions): GlobalState[\"initiated\"] => {\n    switch (action.type) {\n        case \"INITIATED\":\n            return true;\n\n        default:\n            return state.initiated;\n    }\n}","import { Actions, GlobalState } from \"./mainReducer\";\n\nexport const logReducer = (state: GlobalState, action: Actions): GlobalState[\"log\"] => {\n    return [\n        ...state.log,\n        { date: new Date(), action: JSON.stringify(action) },\n    ];\n}","import { countReducer, CountActions } from \"./countReducer\"\nimport { loadingReducer, LoadingActions } from \"./loadingReducer\"\nimport { initiatedReducer, InitiatedActions } from \"./initiatedReducer\"\nimport { logReducer } from \"./logReducer\"\n\nexport interface GlobalState {\n    initiated: boolean;\n    loading: boolean;\n    count: number;\n    log: Log[];\n}\n\ninterface Log {\n    date: Date;\n    action: string;\n}\n\nexport const initialState: GlobalState = {\n    initiated: false,\n    loading: false,\n    count: 0,\n    log: []\n}\n\nexport const mainReducer = (state: GlobalState, action: Actions): GlobalState => ({\n    initiated: initiatedReducer(state, action),\n    loading: loadingReducer(state, action),\n    count: countReducer(state, action),\n    log: logReducer(state, action),\n})\n\nexport interface SimpleAction<ActionType> {\n    type: ActionType;\n}\n\nexport interface PayloadedAction<ActionType, PayloadType> extends SimpleAction<ActionType> {\n    payload: PayloadType;\n}\n\nexport type Actions = CountActions | LoadingActions | InitiatedActions;","import React from \"react\";\nimport { useReactSaga } from \"use-react-saga\";\n\nimport { mainSaga } from \"./actions/mainSaga\";\nimport { mainReducer, initialState, Actions as ReducerActions, GlobalState } from \"./reducers/mainReducer\"\nimport { Actions as SagaActions } from \"./actions/mainSaga\";\n\ntype Actions = ReducerActions | SagaActions;\n\ninterface Store {\n  state: GlobalState,\n  dispatch: (actions: Actions) => void\n}\n\nexport const store = React.createContext({\n    state: initialState,\n    dispatch: (actions: Actions) => {}\n});\n\nexport const StateProvider: React.FunctionComponent = ({ children }) => {\n    const { Provider } = store;\n    const [state, reducerDispatch] = React.useReducer(mainReducer, initialState);\n    const dispatch: (action: Actions) => void = useReactSaga({ state, dispatch: reducerDispatch, saga: mainSaga });\n    \n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport const useGlobalStore = () => React.useContext(store) as Store;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { useGlobalStore } from \"../store\";\n\nexport const CompleteButton: React.FunctionComponent = () => {\n    const { state, dispatch } = useGlobalStore();\n\n    return <Button onClick={() => dispatch({ type: \"INCREMENT_ASYNC\" })} loading={state.loading} disabled={state.count === 100}>\n        Complete async\n    </Button>;\n};","import React from \"react\";\nimport { useGlobalStore } from \"../store\";\nimport { CompleteButton } from \"./CompleteButton\";\nimport { Button, Progress, Spin, Timeline } from \"antd\";\nimport { PlusOutlined, MinusOutlined, CaretRightOutlined } from \"@ant-design/icons\"\nimport \"../styles/App.css\";\n\nconst App: React.FunctionComponent = () => {\n  const { state, dispatch } = useGlobalStore();\n\n  React.useEffect(() => {\n    dispatch({ type: \"APP_START\" });\n  }, [dispatch]);\n  \n  return (\n    <div className=\"container\">\n      {!state.initiated && <main><Spin size=\"large\" /></main>}\n\n      {state.initiated && <>\n        <main>\n          <Progress type=\"circle\" percent={state.count} />\n\n          <div className=\"buttons-container\">\n              <CompleteButton />\n              <br />\n              <Button onClick={() => dispatch({ type: \"COUNT_DECREASE\" })} icon={<MinusOutlined />}>Decrease</Button>\n              <Button onClick={() => dispatch({ type: \"COUNT_INCREMENT\" })} icon={<PlusOutlined />}>Increment</Button>\n              <br />\n              <Button onClick={() => dispatch({ type: \"APP_START\" })}>Reset</Button>\n              <Button onClick={() => dispatch({ type: \"COUNT_RESET\" })}>Set to 0</Button>\n              <Button onClick={() => dispatch({ type: \"COUNT_SET\", payload: 50 })}>Set to 50</Button>\n          </div>\n        </main>\n\n        <Timeline mode=\"left\" reverse={true}>\n          {state.log.map(log => <Timeline.Item>{formatDate(log.date)} <CaretRightOutlined /> {formatLog(log.action)}</Timeline.Item>)}\n        </Timeline>\n      </>}\n    </div>\n  );\n};\n\nexport default App;\n\nconst formatNumber = (number: number): number | string => number < 10 ? `0${number}` : number;\nconst formatDate = (date: Date): string => `${formatNumber(date.getMinutes())}:${formatNumber(date.getSeconds())}`;\nconst formatLog = (log: string): string => log.replace(/{/g, \"{ \").replace(/}/g, \" }\").replace(/:/g, \" : \").replace(/,/g, \" , \");","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from \"./store\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}